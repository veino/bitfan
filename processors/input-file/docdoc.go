// Code generated by "bitfanDoc "; DO NOT EDIT
package file

import "github.com/vjeantet/bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
  Name:       "file",
  ImportPath: "github.com/vjeantet/bitfan/processors/input-file",
  Doc:        "Read file on\n\n* received event\n* when new file discovered\n\nthis processor remember last files used, it stores references in sincedb, set it to \"/dev/null\" to not remember used files",
  DocShort:   "",
  Options:    &doc.ProcessorOptions{
    Doc:     "",
    Options: []*doc.ProcessorOption{
      &doc.ProcessorOption{
        Name:           "processors.CommonOptions",
        Alias:          ",squash",
        Doc:            "",
        Required:       false,
        Type:           "processors.CommonOptions",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Codec",
        Alias:          "codec",
        Doc:            "The codec used for input data. Input codecs are a convenient method for decoding\nyour data before it enters the input, without needing a separate filter in your bitfan pipeline",
        Required:       false,
        Type:           "codec",
        DefaultValue:   "\"plain\"",
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "ReadOlder",
        Alias:          "read_older",
        Doc:            "How many seconds a file should stay unmodified to be read\nuse this to prevent reading a file while another process is writing into.",
        Required:       false,
        Type:           "int",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "DiscoverInterval",
        Alias:          "discover_interval",
        Doc:            "How often (in seconds) we expand the filename patterns in the path option\nto discover new files to watch. Default value is 15\nWhen value is 0, processor will read file, one time, on event.",
        Required:       false,
        Type:           "int",
        DefaultValue:   "15",
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Exclude",
        Alias:          "exclude",
        Doc:            "Exclusions (matched against the filename, not full path).\nFilename patterns are valid here, too.",
        Required:       false,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "IgnoreOlder",
        Alias:          "ignore_older",
        Doc:            "When the file input discovers a file that was last modified before the\nspecified timespan in seconds, the file is ignored.\nAfter itâ€™s discovery, if an ignored file is modified it is no longer ignored\nand any new data is read.\nDefault value is 86400 (i.e. 24 hours)",
        Required:       false,
        Type:           "int",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "MaxOpenFiles",
        Alias:          "max_open_files",
        Doc:            "What is the maximum number of file_handles that this input consumes at any one time.\nUse close_older to close some files if you need to process more files than this number.",
        Required:       false,
        Type:           "int",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "Path",
        Alias:          "path",
        Doc:            "The path(s) to the file(s) to use as an input.\nYou can use filename patterns here, such as /var/log/*.log.\nIf you use a pattern like /var/log/**/*.log, a recursive search of /var/log\nwill be done for all *.log files.\nPaths must be absolute and cannot be relative.\nYou may also configure multiple paths.",
        Required:       true,
        Type:           "array",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
      &doc.ProcessorOption{
        Name:           "SincedbPath",
        Alias:          "sincedb_path",
        Doc:            "Path of the sincedb database file\nThe sincedb database keeps track of the current position of monitored\nlog files that will be written to disk.\nSet it to \"/dev/null\" to not use sincedb features",
        Required:       false,
        Type:           "string",
        DefaultValue:   ": \"$dataLocation/readfile/.sincedb.json\"",
        PossibleValues: []string{},
        ExampleLS:      ": sincedb_path => \"/dev/null\"",
      },
      &doc.ProcessorOption{
        Name:           "Target",
        Alias:          "target",
        Doc:            "When decoded data is an array it stores the resulting data into the given target field.",
        Required:       false,
        Type:           "string",
        DefaultValue:   nil,
        PossibleValues: []string{},
        ExampleLS:      "",
      },
    },
  },
  Ports: []*doc.ProcessorPort{},
}
}