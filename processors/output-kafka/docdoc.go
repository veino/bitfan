// Code generated by "bitfanDoc "; DO NOT EDIT
package kafkaoutput

import "github.com/vjeantet/bitfan/processors/doc"

func (p *processor) Doc() *doc.Processor {
	return &doc.Processor{
		Behavior:   "",
		Name:       "kafkaoutput",
		ImportPath: "github.com/vjeantet/bitfan/processors/output-kafka",
		Doc:        "",
		DocShort:   "",
		Options: &doc.ProcessorOptions{
			Doc: "",
			Options: []*doc.ProcessorOption{
				&doc.ProcessorOption{
					Name:           "processors.CommonOptions",
					Alias:          ",squash",
					Doc:            "",
					Required:       false,
					Type:           "processors.CommonOptions",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "BootstrapServers",
					Alias:          "bootstrap_servers",
					Doc:            "Bootstrap Servers ( \"host:port\" )",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Brokers",
					Alias:          "brokers",
					Doc:            "Broker list",
					Required:       false,
					Type:           "array",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "TopicID",
					Alias:          "topic_id",
					Doc:            "Kafka topic",
					Required:       true,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "ClientID",
					Alias:          "client_id",
					Doc:            "Kafka client id",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "Balancer",
					Alias:          "balancer",
					Doc:            "Balancer ( roundrobin, hash or leastbytes )",
					Required:       false,
					Type:           "string",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "MaxAttempts",
					Alias:          "max_attempts",
					Doc:            "Max Attempts",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "QueueSize",
					Alias:          "queue_size",
					Doc:            "Queue Size",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "BatchSize",
					Alias:          "batch_size",
					Doc:            "Batch Size",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "KeepAlive",
					Alias:          "keepalive",
					Doc:            "Keep Alive ( in seconds )",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "IOTimeout",
					Alias:          "io_timeout",
					Doc:            "IO Timeout ( in seconds )",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
				&doc.ProcessorOption{
					Name:           "RequiredAcks",
					Alias:          "acks",
					Doc:            "Required Acks ( number of replicas that must acknowledge write. -1 for all replicas )",
					Required:       false,
					Type:           "int",
					DefaultValue:   nil,
					PossibleValues: []string{},
					ExampleLS:      "",
				},
			},
		},
		Ports: []*doc.ProcessorPort{},
	}
}
